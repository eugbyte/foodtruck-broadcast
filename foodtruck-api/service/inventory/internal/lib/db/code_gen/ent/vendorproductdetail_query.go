// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/predicate"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/product"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendor"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendorproductdetail"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorProductDetailQuery is the builder for querying VendorProductDetail entities.
type VendorProductDetailQuery struct {
	config
	ctx               *QueryContext
	order             []vendorproductdetail.OrderOption
	inters            []Interceptor
	predicates        []predicate.VendorProductDetail
	withVendorParent  *VendorQuery
	withProductParent *ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VendorProductDetailQuery builder.
func (vpdq *VendorProductDetailQuery) Where(ps ...predicate.VendorProductDetail) *VendorProductDetailQuery {
	vpdq.predicates = append(vpdq.predicates, ps...)
	return vpdq
}

// Limit the number of records to be returned by this query.
func (vpdq *VendorProductDetailQuery) Limit(limit int) *VendorProductDetailQuery {
	vpdq.ctx.Limit = &limit
	return vpdq
}

// Offset to start from.
func (vpdq *VendorProductDetailQuery) Offset(offset int) *VendorProductDetailQuery {
	vpdq.ctx.Offset = &offset
	return vpdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vpdq *VendorProductDetailQuery) Unique(unique bool) *VendorProductDetailQuery {
	vpdq.ctx.Unique = &unique
	return vpdq
}

// Order specifies how the records should be ordered.
func (vpdq *VendorProductDetailQuery) Order(o ...vendorproductdetail.OrderOption) *VendorProductDetailQuery {
	vpdq.order = append(vpdq.order, o...)
	return vpdq
}

// QueryVendorParent chains the current query on the "vendor_parent" edge.
func (vpdq *VendorProductDetailQuery) QueryVendorParent() *VendorQuery {
	query := (&VendorClient{config: vpdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorproductdetail.Table, vendorproductdetail.FieldID, selector),
			sqlgraph.To(vendor.Table, vendor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vendorproductdetail.VendorParentTable, vendorproductdetail.VendorParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(vpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductParent chains the current query on the "product_parent" edge.
func (vpdq *VendorProductDetailQuery) QueryProductParent() *ProductQuery {
	query := (&ProductClient{config: vpdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorproductdetail.Table, vendorproductdetail.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vendorproductdetail.ProductParentTable, vendorproductdetail.ProductParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(vpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VendorProductDetail entity from the query.
// Returns a *NotFoundError when no VendorProductDetail was found.
func (vpdq *VendorProductDetailQuery) First(ctx context.Context) (*VendorProductDetail, error) {
	nodes, err := vpdq.Limit(1).All(setContextOp(ctx, vpdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vendorproductdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) FirstX(ctx context.Context) *VendorProductDetail {
	node, err := vpdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VendorProductDetail ID from the query.
// Returns a *NotFoundError when no VendorProductDetail ID was found.
func (vpdq *VendorProductDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vpdq.Limit(1).IDs(setContextOp(ctx, vpdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vendorproductdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := vpdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VendorProductDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VendorProductDetail entity is found.
// Returns a *NotFoundError when no VendorProductDetail entities are found.
func (vpdq *VendorProductDetailQuery) Only(ctx context.Context) (*VendorProductDetail, error) {
	nodes, err := vpdq.Limit(2).All(setContextOp(ctx, vpdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vendorproductdetail.Label}
	default:
		return nil, &NotSingularError{vendorproductdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) OnlyX(ctx context.Context) *VendorProductDetail {
	node, err := vpdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VendorProductDetail ID in the query.
// Returns a *NotSingularError when more than one VendorProductDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (vpdq *VendorProductDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vpdq.Limit(2).IDs(setContextOp(ctx, vpdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vendorproductdetail.Label}
	default:
		err = &NotSingularError{vendorproductdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := vpdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VendorProductDetails.
func (vpdq *VendorProductDetailQuery) All(ctx context.Context) ([]*VendorProductDetail, error) {
	ctx = setContextOp(ctx, vpdq.ctx, "All")
	if err := vpdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VendorProductDetail, *VendorProductDetailQuery]()
	return withInterceptors[[]*VendorProductDetail](ctx, vpdq, qr, vpdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) AllX(ctx context.Context) []*VendorProductDetail {
	nodes, err := vpdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VendorProductDetail IDs.
func (vpdq *VendorProductDetailQuery) IDs(ctx context.Context) (ids []int, err error) {
	if vpdq.ctx.Unique == nil && vpdq.path != nil {
		vpdq.Unique(true)
	}
	ctx = setContextOp(ctx, vpdq.ctx, "IDs")
	if err = vpdq.Select(vendorproductdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := vpdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vpdq *VendorProductDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vpdq.ctx, "Count")
	if err := vpdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vpdq, querierCount[*VendorProductDetailQuery](), vpdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) CountX(ctx context.Context) int {
	count, err := vpdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vpdq *VendorProductDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vpdq.ctx, "Exist")
	switch _, err := vpdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vpdq *VendorProductDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := vpdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VendorProductDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vpdq *VendorProductDetailQuery) Clone() *VendorProductDetailQuery {
	if vpdq == nil {
		return nil
	}
	return &VendorProductDetailQuery{
		config:            vpdq.config,
		ctx:               vpdq.ctx.Clone(),
		order:             append([]vendorproductdetail.OrderOption{}, vpdq.order...),
		inters:            append([]Interceptor{}, vpdq.inters...),
		predicates:        append([]predicate.VendorProductDetail{}, vpdq.predicates...),
		withVendorParent:  vpdq.withVendorParent.Clone(),
		withProductParent: vpdq.withProductParent.Clone(),
		// clone intermediate query.
		sql:  vpdq.sql.Clone(),
		path: vpdq.path,
	}
}

// WithVendorParent tells the query-builder to eager-load the nodes that are connected to
// the "vendor_parent" edge. The optional arguments are used to configure the query builder of the edge.
func (vpdq *VendorProductDetailQuery) WithVendorParent(opts ...func(*VendorQuery)) *VendorProductDetailQuery {
	query := (&VendorClient{config: vpdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpdq.withVendorParent = query
	return vpdq
}

// WithProductParent tells the query-builder to eager-load the nodes that are connected to
// the "product_parent" edge. The optional arguments are used to configure the query builder of the edge.
func (vpdq *VendorProductDetailQuery) WithProductParent(opts ...func(*ProductQuery)) *VendorProductDetailQuery {
	query := (&ProductClient{config: vpdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpdq.withProductParent = query
	return vpdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VendorID int `json:"vendor_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VendorProductDetail.Query().
//		GroupBy(vendorproductdetail.FieldVendorID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vpdq *VendorProductDetailQuery) GroupBy(field string, fields ...string) *VendorProductDetailGroupBy {
	vpdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VendorProductDetailGroupBy{build: vpdq}
	grbuild.flds = &vpdq.ctx.Fields
	grbuild.label = vendorproductdetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		VendorID int `json:"vendor_id,omitempty"`
//	}
//
//	client.VendorProductDetail.Query().
//		Select(vendorproductdetail.FieldVendorID).
//		Scan(ctx, &v)
func (vpdq *VendorProductDetailQuery) Select(fields ...string) *VendorProductDetailSelect {
	vpdq.ctx.Fields = append(vpdq.ctx.Fields, fields...)
	sbuild := &VendorProductDetailSelect{VendorProductDetailQuery: vpdq}
	sbuild.label = vendorproductdetail.Label
	sbuild.flds, sbuild.scan = &vpdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VendorProductDetailSelect configured with the given aggregations.
func (vpdq *VendorProductDetailQuery) Aggregate(fns ...AggregateFunc) *VendorProductDetailSelect {
	return vpdq.Select().Aggregate(fns...)
}

func (vpdq *VendorProductDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vpdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vpdq); err != nil {
				return err
			}
		}
	}
	for _, f := range vpdq.ctx.Fields {
		if !vendorproductdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vpdq.path != nil {
		prev, err := vpdq.path(ctx)
		if err != nil {
			return err
		}
		vpdq.sql = prev
	}
	return nil
}

func (vpdq *VendorProductDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VendorProductDetail, error) {
	var (
		nodes       = []*VendorProductDetail{}
		_spec       = vpdq.querySpec()
		loadedTypes = [2]bool{
			vpdq.withVendorParent != nil,
			vpdq.withProductParent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VendorProductDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VendorProductDetail{config: vpdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vpdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vpdq.withVendorParent; query != nil {
		if err := vpdq.loadVendorParent(ctx, query, nodes, nil,
			func(n *VendorProductDetail, e *Vendor) { n.Edges.VendorParent = e }); err != nil {
			return nil, err
		}
	}
	if query := vpdq.withProductParent; query != nil {
		if err := vpdq.loadProductParent(ctx, query, nodes, nil,
			func(n *VendorProductDetail, e *Product) { n.Edges.ProductParent = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vpdq *VendorProductDetailQuery) loadVendorParent(ctx context.Context, query *VendorQuery, nodes []*VendorProductDetail, init func(*VendorProductDetail), assign func(*VendorProductDetail, *Vendor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*VendorProductDetail)
	for i := range nodes {
		fk := nodes[i].VendorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vendor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "vendor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vpdq *VendorProductDetailQuery) loadProductParent(ctx context.Context, query *ProductQuery, nodes []*VendorProductDetail, init func(*VendorProductDetail), assign func(*VendorProductDetail, *Product)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*VendorProductDetail)
	for i := range nodes {
		fk := nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vpdq *VendorProductDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vpdq.querySpec()
	_spec.Node.Columns = vpdq.ctx.Fields
	if len(vpdq.ctx.Fields) > 0 {
		_spec.Unique = vpdq.ctx.Unique != nil && *vpdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vpdq.driver, _spec)
}

func (vpdq *VendorProductDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vendorproductdetail.Table, vendorproductdetail.Columns, sqlgraph.NewFieldSpec(vendorproductdetail.FieldID, field.TypeInt))
	_spec.From = vpdq.sql
	if unique := vpdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vpdq.path != nil {
		_spec.Unique = true
	}
	if fields := vpdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorproductdetail.FieldID)
		for i := range fields {
			if fields[i] != vendorproductdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vpdq.withVendorParent != nil {
			_spec.Node.AddColumnOnce(vendorproductdetail.FieldVendorID)
		}
		if vpdq.withProductParent != nil {
			_spec.Node.AddColumnOnce(vendorproductdetail.FieldProductID)
		}
	}
	if ps := vpdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vpdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vpdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vpdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vpdq *VendorProductDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vpdq.driver.Dialect())
	t1 := builder.Table(vendorproductdetail.Table)
	columns := vpdq.ctx.Fields
	if len(columns) == 0 {
		columns = vendorproductdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vpdq.sql != nil {
		selector = vpdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vpdq.ctx.Unique != nil && *vpdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vpdq.predicates {
		p(selector)
	}
	for _, p := range vpdq.order {
		p(selector)
	}
	if offset := vpdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vpdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VendorProductDetailGroupBy is the group-by builder for VendorProductDetail entities.
type VendorProductDetailGroupBy struct {
	selector
	build *VendorProductDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vpdgb *VendorProductDetailGroupBy) Aggregate(fns ...AggregateFunc) *VendorProductDetailGroupBy {
	vpdgb.fns = append(vpdgb.fns, fns...)
	return vpdgb
}

// Scan applies the selector query and scans the result into the given value.
func (vpdgb *VendorProductDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vpdgb.build.ctx, "GroupBy")
	if err := vpdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProductDetailQuery, *VendorProductDetailGroupBy](ctx, vpdgb.build, vpdgb, vpdgb.build.inters, v)
}

func (vpdgb *VendorProductDetailGroupBy) sqlScan(ctx context.Context, root *VendorProductDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vpdgb.fns))
	for _, fn := range vpdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vpdgb.flds)+len(vpdgb.fns))
		for _, f := range *vpdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vpdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vpdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VendorProductDetailSelect is the builder for selecting fields of VendorProductDetail entities.
type VendorProductDetailSelect struct {
	*VendorProductDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vpds *VendorProductDetailSelect) Aggregate(fns ...AggregateFunc) *VendorProductDetailSelect {
	vpds.fns = append(vpds.fns, fns...)
	return vpds
}

// Scan applies the selector query and scans the result into the given value.
func (vpds *VendorProductDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vpds.ctx, "Select")
	if err := vpds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProductDetailQuery, *VendorProductDetailSelect](ctx, vpds.VendorProductDetailQuery, vpds, vpds.inters, v)
}

func (vpds *VendorProductDetailSelect) sqlScan(ctx context.Context, root *VendorProductDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vpds.fns))
	for _, fn := range vpds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vpds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vpds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
