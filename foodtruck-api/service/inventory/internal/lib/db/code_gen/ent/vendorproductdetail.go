// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/product"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendor"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendorproductdetail"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VendorProductDetail is the model entity for the VendorProductDetail schema.
type VendorProductDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VendorID holds the value of the "vendor_id" field.
	VendorID int `json:"vendor_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorProductDetailQuery when eager-loading is set.
	Edges        VendorProductDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorProductDetailEdges holds the relations/edges for other nodes in the graph.
type VendorProductDetailEdges struct {
	// VendorParent holds the value of the vendor_parent edge.
	VendorParent *Vendor `json:"vendor_parent,omitempty"`
	// ProductParent holds the value of the product_parent edge.
	ProductParent *Product `json:"product_parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VendorParentOrErr returns the VendorParent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProductDetailEdges) VendorParentOrErr() (*Vendor, error) {
	if e.loadedTypes[0] {
		if e.VendorParent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vendor.Label}
		}
		return e.VendorParent, nil
	}
	return nil, &NotLoadedError{edge: "vendor_parent"}
}

// ProductParentOrErr returns the ProductParent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProductDetailEdges) ProductParentOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.ProductParent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.ProductParent, nil
	}
	return nil, &NotLoadedError{edge: "product_parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProductDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorproductdetail.FieldID, vendorproductdetail.FieldVendorID, vendorproductdetail.FieldProductID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProductDetail fields.
func (vpd *VendorProductDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorproductdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vpd.ID = int(value.Int64)
		case vendorproductdetail.FieldVendorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_id", values[i])
			} else if value.Valid {
				vpd.VendorID = int(value.Int64)
			}
		case vendorproductdetail.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				vpd.ProductID = int(value.Int64)
			}
		default:
			vpd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProductDetail.
// This includes values selected through modifiers, order, etc.
func (vpd *VendorProductDetail) Value(name string) (ent.Value, error) {
	return vpd.selectValues.Get(name)
}

// QueryVendorParent queries the "vendor_parent" edge of the VendorProductDetail entity.
func (vpd *VendorProductDetail) QueryVendorParent() *VendorQuery {
	return NewVendorProductDetailClient(vpd.config).QueryVendorParent(vpd)
}

// QueryProductParent queries the "product_parent" edge of the VendorProductDetail entity.
func (vpd *VendorProductDetail) QueryProductParent() *ProductQuery {
	return NewVendorProductDetailClient(vpd.config).QueryProductParent(vpd)
}

// Update returns a builder for updating this VendorProductDetail.
// Note that you need to call VendorProductDetail.Unwrap() before calling this method if this VendorProductDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (vpd *VendorProductDetail) Update() *VendorProductDetailUpdateOne {
	return NewVendorProductDetailClient(vpd.config).UpdateOne(vpd)
}

// Unwrap unwraps the VendorProductDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vpd *VendorProductDetail) Unwrap() *VendorProductDetail {
	_tx, ok := vpd.config.driver.(*txDriver)
	if !ok {
		panic("ent: VendorProductDetail is not a transactional entity")
	}
	vpd.config.driver = _tx.drv
	return vpd
}

// String implements the fmt.Stringer.
func (vpd *VendorProductDetail) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProductDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vpd.ID))
	builder.WriteString("vendor_id=")
	builder.WriteString(fmt.Sprintf("%v", vpd.VendorID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", vpd.ProductID))
	builder.WriteByte(')')
	return builder.String()
}

// VendorProductDetails is a parsable slice of VendorProductDetail.
type VendorProductDetails []*VendorProductDetail
