// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/predicate"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendorproductdetail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorProductDetailDelete is the builder for deleting a VendorProductDetail entity.
type VendorProductDetailDelete struct {
	config
	hooks    []Hook
	mutation *VendorProductDetailMutation
}

// Where appends a list predicates to the VendorProductDetailDelete builder.
func (vpdd *VendorProductDetailDelete) Where(ps ...predicate.VendorProductDetail) *VendorProductDetailDelete {
	vpdd.mutation.Where(ps...)
	return vpdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vpdd *VendorProductDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vpdd.sqlExec, vpdd.mutation, vpdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vpdd *VendorProductDetailDelete) ExecX(ctx context.Context) int {
	n, err := vpdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vpdd *VendorProductDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vendorproductdetail.Table, sqlgraph.NewFieldSpec(vendorproductdetail.FieldID, field.TypeInt))
	if ps := vpdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vpdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vpdd.mutation.done = true
	return affected, err
}

// VendorProductDetailDeleteOne is the builder for deleting a single VendorProductDetail entity.
type VendorProductDetailDeleteOne struct {
	vpdd *VendorProductDetailDelete
}

// Where appends a list predicates to the VendorProductDetailDelete builder.
func (vpddo *VendorProductDetailDeleteOne) Where(ps ...predicate.VendorProductDetail) *VendorProductDetailDeleteOne {
	vpddo.vpdd.mutation.Where(ps...)
	return vpddo
}

// Exec executes the deletion query.
func (vpddo *VendorProductDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := vpddo.vpdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vendorproductdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vpddo *VendorProductDetailDeleteOne) ExecX(ctx context.Context) {
	if err := vpddo.Exec(ctx); err != nil {
		panic(err)
	}
}
