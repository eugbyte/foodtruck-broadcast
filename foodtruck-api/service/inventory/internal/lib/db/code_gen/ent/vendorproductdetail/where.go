// Code generated by ent, DO NOT EDIT.

package vendorproductdetail

import (
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldLTE(FieldID, id))
}

// VendorID applies equality check predicate on the "vendor_id" field. It's identical to VendorIDEQ.
func VendorID(v int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldEQ(FieldVendorID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldEQ(FieldProductID, v))
}

// VendorIDEQ applies the EQ predicate on the "vendor_id" field.
func VendorIDEQ(v int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldEQ(FieldVendorID, v))
}

// VendorIDNEQ applies the NEQ predicate on the "vendor_id" field.
func VendorIDNEQ(v int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNEQ(FieldVendorID, v))
}

// VendorIDIn applies the In predicate on the "vendor_id" field.
func VendorIDIn(vs ...int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldIn(FieldVendorID, vs...))
}

// VendorIDNotIn applies the NotIn predicate on the "vendor_id" field.
func VendorIDNotIn(vs ...int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNotIn(FieldVendorID, vs...))
}

// VendorIDIsNil applies the IsNil predicate on the "vendor_id" field.
func VendorIDIsNil() predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldIsNull(FieldVendorID))
}

// VendorIDNotNil applies the NotNil predicate on the "vendor_id" field.
func VendorIDNotNil() predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNotNull(FieldVendorID))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.VendorProductDetail {
	return predicate.VendorProductDetail(sql.FieldNotNull(FieldProductID))
}

// HasVendorParent applies the HasEdge predicate on the "vendor_parent" edge.
func HasVendorParent() predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VendorParentTable, VendorParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVendorParentWith applies the HasEdge predicate on the "vendor_parent" edge with a given conditions (other predicates).
func HasVendorParentWith(preds ...predicate.Vendor) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		step := newVendorParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductParent applies the HasEdge predicate on the "product_parent" edge.
func HasProductParent() predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductParentTable, ProductParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductParentWith applies the HasEdge predicate on the "product_parent" edge with a given conditions (other predicates).
func HasProductParentWith(preds ...predicate.Product) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		step := newProductParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VendorProductDetail) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VendorProductDetail) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VendorProductDetail) predicate.VendorProductDetail {
	return predicate.VendorProductDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
