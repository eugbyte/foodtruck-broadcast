// Code generated by ent, DO NOT EDIT.

package vendor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vendor type in the database.
	Label = "vendor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeVendorProductDetails holds the string denoting the vendor_product_details edge name in mutations.
	EdgeVendorProductDetails = "vendor_product_details"
	// Table holds the table name of the vendor in the database.
	Table = "vendors"
	// VendorProductDetailsTable is the table that holds the vendor_product_details relation/edge.
	VendorProductDetailsTable = "vendor_product_details"
	// VendorProductDetailsInverseTable is the table name for the VendorProductDetail entity.
	// It exists in this package in order to avoid circular dependency with the "vendorproductdetail" package.
	VendorProductDetailsInverseTable = "vendor_product_details"
	// VendorProductDetailsColumn is the table column denoting the vendor_product_details relation/edge.
	VendorProductDetailsColumn = "vendor_id"
)

// Columns holds all SQL columns for vendor fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Vendor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByVendorProductDetailsCount orders the results by vendor_product_details count.
func ByVendorProductDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVendorProductDetailsStep(), opts...)
	}
}

// ByVendorProductDetails orders the results by vendor_product_details terms.
func ByVendorProductDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVendorProductDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVendorProductDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VendorProductDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VendorProductDetailsTable, VendorProductDetailsColumn),
	)
}
