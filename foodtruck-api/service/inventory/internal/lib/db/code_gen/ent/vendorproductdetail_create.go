// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/product"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendor"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendorproductdetail"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorProductDetailCreate is the builder for creating a VendorProductDetail entity.
type VendorProductDetailCreate struct {
	config
	mutation *VendorProductDetailMutation
	hooks    []Hook
}

// SetVendorID sets the "vendor_id" field.
func (vpdc *VendorProductDetailCreate) SetVendorID(i int) *VendorProductDetailCreate {
	vpdc.mutation.SetVendorID(i)
	return vpdc
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (vpdc *VendorProductDetailCreate) SetNillableVendorID(i *int) *VendorProductDetailCreate {
	if i != nil {
		vpdc.SetVendorID(*i)
	}
	return vpdc
}

// SetProductID sets the "product_id" field.
func (vpdc *VendorProductDetailCreate) SetProductID(i int) *VendorProductDetailCreate {
	vpdc.mutation.SetProductID(i)
	return vpdc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (vpdc *VendorProductDetailCreate) SetNillableProductID(i *int) *VendorProductDetailCreate {
	if i != nil {
		vpdc.SetProductID(*i)
	}
	return vpdc
}

// SetVendorParentID sets the "vendor_parent" edge to the Vendor entity by ID.
func (vpdc *VendorProductDetailCreate) SetVendorParentID(id int) *VendorProductDetailCreate {
	vpdc.mutation.SetVendorParentID(id)
	return vpdc
}

// SetNillableVendorParentID sets the "vendor_parent" edge to the Vendor entity by ID if the given value is not nil.
func (vpdc *VendorProductDetailCreate) SetNillableVendorParentID(id *int) *VendorProductDetailCreate {
	if id != nil {
		vpdc = vpdc.SetVendorParentID(*id)
	}
	return vpdc
}

// SetVendorParent sets the "vendor_parent" edge to the Vendor entity.
func (vpdc *VendorProductDetailCreate) SetVendorParent(v *Vendor) *VendorProductDetailCreate {
	return vpdc.SetVendorParentID(v.ID)
}

// SetProductParentID sets the "product_parent" edge to the Product entity by ID.
func (vpdc *VendorProductDetailCreate) SetProductParentID(id int) *VendorProductDetailCreate {
	vpdc.mutation.SetProductParentID(id)
	return vpdc
}

// SetNillableProductParentID sets the "product_parent" edge to the Product entity by ID if the given value is not nil.
func (vpdc *VendorProductDetailCreate) SetNillableProductParentID(id *int) *VendorProductDetailCreate {
	if id != nil {
		vpdc = vpdc.SetProductParentID(*id)
	}
	return vpdc
}

// SetProductParent sets the "product_parent" edge to the Product entity.
func (vpdc *VendorProductDetailCreate) SetProductParent(p *Product) *VendorProductDetailCreate {
	return vpdc.SetProductParentID(p.ID)
}

// Mutation returns the VendorProductDetailMutation object of the builder.
func (vpdc *VendorProductDetailCreate) Mutation() *VendorProductDetailMutation {
	return vpdc.mutation
}

// Save creates the VendorProductDetail in the database.
func (vpdc *VendorProductDetailCreate) Save(ctx context.Context) (*VendorProductDetail, error) {
	return withHooks(ctx, vpdc.sqlSave, vpdc.mutation, vpdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vpdc *VendorProductDetailCreate) SaveX(ctx context.Context) *VendorProductDetail {
	v, err := vpdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpdc *VendorProductDetailCreate) Exec(ctx context.Context) error {
	_, err := vpdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpdc *VendorProductDetailCreate) ExecX(ctx context.Context) {
	if err := vpdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpdc *VendorProductDetailCreate) check() error {
	return nil
}

func (vpdc *VendorProductDetailCreate) sqlSave(ctx context.Context) (*VendorProductDetail, error) {
	if err := vpdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vpdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vpdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vpdc.mutation.id = &_node.ID
	vpdc.mutation.done = true
	return _node, nil
}

func (vpdc *VendorProductDetailCreate) createSpec() (*VendorProductDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProductDetail{config: vpdc.config}
		_spec = sqlgraph.NewCreateSpec(vendorproductdetail.Table, sqlgraph.NewFieldSpec(vendorproductdetail.FieldID, field.TypeInt))
	)
	if nodes := vpdc.mutation.VendorParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorproductdetail.VendorParentTable,
			Columns: []string{vendorproductdetail.VendorParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vpdc.mutation.ProductParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorproductdetail.ProductParentTable,
			Columns: []string{vendorproductdetail.ProductParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorProductDetailCreateBulk is the builder for creating many VendorProductDetail entities in bulk.
type VendorProductDetailCreateBulk struct {
	config
	builders []*VendorProductDetailCreate
}

// Save creates the VendorProductDetail entities in the database.
func (vpdcb *VendorProductDetailCreateBulk) Save(ctx context.Context) ([]*VendorProductDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vpdcb.builders))
	nodes := make([]*VendorProductDetail, len(vpdcb.builders))
	mutators := make([]Mutator, len(vpdcb.builders))
	for i := range vpdcb.builders {
		func(i int, root context.Context) {
			builder := vpdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProductDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vpdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vpdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vpdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vpdcb *VendorProductDetailCreateBulk) SaveX(ctx context.Context) []*VendorProductDetail {
	v, err := vpdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpdcb *VendorProductDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := vpdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpdcb *VendorProductDetailCreateBulk) ExecX(ctx context.Context) {
	if err := vpdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
