// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/predicate"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/product"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendor"
	"foodtruck/service/inventory/internal/lib/db/code_gen/ent/vendorproductdetail"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProduct             = "Product"
	TypeVendor              = "Vendor"
	TypeVendorProductDetail = "VendorProductDetail"
)

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	name                          *string
	description                   *string
	clearedFields                 map[string]struct{}
	vendor_product_details        map[int]struct{}
	removedvendor_product_details map[int]struct{}
	clearedvendor_product_details bool
	done                          bool
	oldValue                      func(context.Context) (*Product, error)
	predicates                    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
}

// AddVendorProductDetailIDs adds the "vendor_product_details" edge to the VendorProductDetail entity by ids.
func (m *ProductMutation) AddVendorProductDetailIDs(ids ...int) {
	if m.vendor_product_details == nil {
		m.vendor_product_details = make(map[int]struct{})
	}
	for i := range ids {
		m.vendor_product_details[ids[i]] = struct{}{}
	}
}

// ClearVendorProductDetails clears the "vendor_product_details" edge to the VendorProductDetail entity.
func (m *ProductMutation) ClearVendorProductDetails() {
	m.clearedvendor_product_details = true
}

// VendorProductDetailsCleared reports if the "vendor_product_details" edge to the VendorProductDetail entity was cleared.
func (m *ProductMutation) VendorProductDetailsCleared() bool {
	return m.clearedvendor_product_details
}

// RemoveVendorProductDetailIDs removes the "vendor_product_details" edge to the VendorProductDetail entity by IDs.
func (m *ProductMutation) RemoveVendorProductDetailIDs(ids ...int) {
	if m.removedvendor_product_details == nil {
		m.removedvendor_product_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vendor_product_details, ids[i])
		m.removedvendor_product_details[ids[i]] = struct{}{}
	}
}

// RemovedVendorProductDetails returns the removed IDs of the "vendor_product_details" edge to the VendorProductDetail entity.
func (m *ProductMutation) RemovedVendorProductDetailsIDs() (ids []int) {
	for id := range m.removedvendor_product_details {
		ids = append(ids, id)
	}
	return
}

// VendorProductDetailsIDs returns the "vendor_product_details" edge IDs in the mutation.
func (m *ProductMutation) VendorProductDetailsIDs() (ids []int) {
	for id := range m.vendor_product_details {
		ids = append(ids, id)
	}
	return
}

// ResetVendorProductDetails resets all changes to the "vendor_product_details" edge.
func (m *ProductMutation) ResetVendorProductDetails() {
	m.vendor_product_details = nil
	m.clearedvendor_product_details = false
	m.removedvendor_product_details = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	case product.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vendor_product_details != nil {
		edges = append(edges, product.EdgeVendorProductDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeVendorProductDetails:
		ids := make([]ent.Value, 0, len(m.vendor_product_details))
		for id := range m.vendor_product_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvendor_product_details != nil {
		edges = append(edges, product.EdgeVendorProductDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeVendorProductDetails:
		ids := make([]ent.Value, 0, len(m.removedvendor_product_details))
		for id := range m.removedvendor_product_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvendor_product_details {
		edges = append(edges, product.EdgeVendorProductDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeVendorProductDetails:
		return m.clearedvendor_product_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeVendorProductDetails:
		m.ResetVendorProductDetails()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// VendorMutation represents an operation that mutates the Vendor nodes in the graph.
type VendorMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	name                          *string
	description                   *string
	clearedFields                 map[string]struct{}
	vendor_product_details        map[int]struct{}
	removedvendor_product_details map[int]struct{}
	clearedvendor_product_details bool
	done                          bool
	oldValue                      func(context.Context) (*Vendor, error)
	predicates                    []predicate.Vendor
}

var _ ent.Mutation = (*VendorMutation)(nil)

// vendorOption allows management of the mutation configuration using functional options.
type vendorOption func(*VendorMutation)

// newVendorMutation creates new mutation for the Vendor entity.
func newVendorMutation(c config, op Op, opts ...vendorOption) *VendorMutation {
	m := &VendorMutation{
		config:        c,
		op:            op,
		typ:           TypeVendor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVendorID sets the ID field of the mutation.
func withVendorID(id int) vendorOption {
	return func(m *VendorMutation) {
		var (
			err   error
			once  sync.Once
			value *Vendor
		)
		m.oldValue = func(ctx context.Context) (*Vendor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vendor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVendor sets the old Vendor of the mutation.
func withVendor(node *Vendor) vendorOption {
	return func(m *VendorMutation) {
		m.oldValue = func(context.Context) (*Vendor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VendorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VendorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VendorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VendorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vendor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *VendorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VendorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VendorMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *VendorMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *VendorMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *VendorMutation) ResetDescription() {
	m.description = nil
}

// AddVendorProductDetailIDs adds the "vendor_product_details" edge to the VendorProductDetail entity by ids.
func (m *VendorMutation) AddVendorProductDetailIDs(ids ...int) {
	if m.vendor_product_details == nil {
		m.vendor_product_details = make(map[int]struct{})
	}
	for i := range ids {
		m.vendor_product_details[ids[i]] = struct{}{}
	}
}

// ClearVendorProductDetails clears the "vendor_product_details" edge to the VendorProductDetail entity.
func (m *VendorMutation) ClearVendorProductDetails() {
	m.clearedvendor_product_details = true
}

// VendorProductDetailsCleared reports if the "vendor_product_details" edge to the VendorProductDetail entity was cleared.
func (m *VendorMutation) VendorProductDetailsCleared() bool {
	return m.clearedvendor_product_details
}

// RemoveVendorProductDetailIDs removes the "vendor_product_details" edge to the VendorProductDetail entity by IDs.
func (m *VendorMutation) RemoveVendorProductDetailIDs(ids ...int) {
	if m.removedvendor_product_details == nil {
		m.removedvendor_product_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vendor_product_details, ids[i])
		m.removedvendor_product_details[ids[i]] = struct{}{}
	}
}

// RemovedVendorProductDetails returns the removed IDs of the "vendor_product_details" edge to the VendorProductDetail entity.
func (m *VendorMutation) RemovedVendorProductDetailsIDs() (ids []int) {
	for id := range m.removedvendor_product_details {
		ids = append(ids, id)
	}
	return
}

// VendorProductDetailsIDs returns the "vendor_product_details" edge IDs in the mutation.
func (m *VendorMutation) VendorProductDetailsIDs() (ids []int) {
	for id := range m.vendor_product_details {
		ids = append(ids, id)
	}
	return
}

// ResetVendorProductDetails resets all changes to the "vendor_product_details" edge.
func (m *VendorMutation) ResetVendorProductDetails() {
	m.vendor_product_details = nil
	m.clearedvendor_product_details = false
	m.removedvendor_product_details = nil
}

// Where appends a list predicates to the VendorMutation builder.
func (m *VendorMutation) Where(ps ...predicate.Vendor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VendorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VendorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vendor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VendorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VendorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vendor).
func (m *VendorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VendorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, vendor.FieldName)
	}
	if m.description != nil {
		fields = append(fields, vendor.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VendorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vendor.FieldName:
		return m.Name()
	case vendor.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VendorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vendor.FieldName:
		return m.OldName(ctx)
	case vendor.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Vendor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vendor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case vendor.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Vendor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VendorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VendorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vendor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VendorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VendorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VendorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vendor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VendorMutation) ResetField(name string) error {
	switch name {
	case vendor.FieldName:
		m.ResetName()
		return nil
	case vendor.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Vendor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VendorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vendor_product_details != nil {
		edges = append(edges, vendor.EdgeVendorProductDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VendorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vendor.EdgeVendorProductDetails:
		ids := make([]ent.Value, 0, len(m.vendor_product_details))
		for id := range m.vendor_product_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VendorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvendor_product_details != nil {
		edges = append(edges, vendor.EdgeVendorProductDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VendorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vendor.EdgeVendorProductDetails:
		ids := make([]ent.Value, 0, len(m.removedvendor_product_details))
		for id := range m.removedvendor_product_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VendorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvendor_product_details {
		edges = append(edges, vendor.EdgeVendorProductDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VendorMutation) EdgeCleared(name string) bool {
	switch name {
	case vendor.EdgeVendorProductDetails:
		return m.clearedvendor_product_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VendorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Vendor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VendorMutation) ResetEdge(name string) error {
	switch name {
	case vendor.EdgeVendorProductDetails:
		m.ResetVendorProductDetails()
		return nil
	}
	return fmt.Errorf("unknown Vendor edge %s", name)
}

// VendorProductDetailMutation represents an operation that mutates the VendorProductDetail nodes in the graph.
type VendorProductDetailMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	clearedFields         map[string]struct{}
	vendor_parent         *int
	clearedvendor_parent  bool
	product_parent        *int
	clearedproduct_parent bool
	done                  bool
	oldValue              func(context.Context) (*VendorProductDetail, error)
	predicates            []predicate.VendorProductDetail
}

var _ ent.Mutation = (*VendorProductDetailMutation)(nil)

// vendorproductdetailOption allows management of the mutation configuration using functional options.
type vendorproductdetailOption func(*VendorProductDetailMutation)

// newVendorProductDetailMutation creates new mutation for the VendorProductDetail entity.
func newVendorProductDetailMutation(c config, op Op, opts ...vendorproductdetailOption) *VendorProductDetailMutation {
	m := &VendorProductDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeVendorProductDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVendorProductDetailID sets the ID field of the mutation.
func withVendorProductDetailID(id int) vendorproductdetailOption {
	return func(m *VendorProductDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *VendorProductDetail
		)
		m.oldValue = func(ctx context.Context) (*VendorProductDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VendorProductDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVendorProductDetail sets the old VendorProductDetail of the mutation.
func withVendorProductDetail(node *VendorProductDetail) vendorproductdetailOption {
	return func(m *VendorProductDetailMutation) {
		m.oldValue = func(context.Context) (*VendorProductDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VendorProductDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VendorProductDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VendorProductDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VendorProductDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VendorProductDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVendorID sets the "vendor_id" field.
func (m *VendorProductDetailMutation) SetVendorID(i int) {
	m.vendor_parent = &i
}

// VendorID returns the value of the "vendor_id" field in the mutation.
func (m *VendorProductDetailMutation) VendorID() (r int, exists bool) {
	v := m.vendor_parent
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorID returns the old "vendor_id" field's value of the VendorProductDetail entity.
// If the VendorProductDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorProductDetailMutation) OldVendorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorID: %w", err)
	}
	return oldValue.VendorID, nil
}

// ClearVendorID clears the value of the "vendor_id" field.
func (m *VendorProductDetailMutation) ClearVendorID() {
	m.vendor_parent = nil
	m.clearedFields[vendorproductdetail.FieldVendorID] = struct{}{}
}

// VendorIDCleared returns if the "vendor_id" field was cleared in this mutation.
func (m *VendorProductDetailMutation) VendorIDCleared() bool {
	_, ok := m.clearedFields[vendorproductdetail.FieldVendorID]
	return ok
}

// ResetVendorID resets all changes to the "vendor_id" field.
func (m *VendorProductDetailMutation) ResetVendorID() {
	m.vendor_parent = nil
	delete(m.clearedFields, vendorproductdetail.FieldVendorID)
}

// SetProductID sets the "product_id" field.
func (m *VendorProductDetailMutation) SetProductID(i int) {
	m.product_parent = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *VendorProductDetailMutation) ProductID() (r int, exists bool) {
	v := m.product_parent
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the VendorProductDetail entity.
// If the VendorProductDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorProductDetailMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ClearProductID clears the value of the "product_id" field.
func (m *VendorProductDetailMutation) ClearProductID() {
	m.product_parent = nil
	m.clearedFields[vendorproductdetail.FieldProductID] = struct{}{}
}

// ProductIDCleared returns if the "product_id" field was cleared in this mutation.
func (m *VendorProductDetailMutation) ProductIDCleared() bool {
	_, ok := m.clearedFields[vendorproductdetail.FieldProductID]
	return ok
}

// ResetProductID resets all changes to the "product_id" field.
func (m *VendorProductDetailMutation) ResetProductID() {
	m.product_parent = nil
	delete(m.clearedFields, vendorproductdetail.FieldProductID)
}

// SetVendorParentID sets the "vendor_parent" edge to the Vendor entity by id.
func (m *VendorProductDetailMutation) SetVendorParentID(id int) {
	m.vendor_parent = &id
}

// ClearVendorParent clears the "vendor_parent" edge to the Vendor entity.
func (m *VendorProductDetailMutation) ClearVendorParent() {
	m.clearedvendor_parent = true
}

// VendorParentCleared reports if the "vendor_parent" edge to the Vendor entity was cleared.
func (m *VendorProductDetailMutation) VendorParentCleared() bool {
	return m.VendorIDCleared() || m.clearedvendor_parent
}

// VendorParentID returns the "vendor_parent" edge ID in the mutation.
func (m *VendorProductDetailMutation) VendorParentID() (id int, exists bool) {
	if m.vendor_parent != nil {
		return *m.vendor_parent, true
	}
	return
}

// VendorParentIDs returns the "vendor_parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VendorParentID instead. It exists only for internal usage by the builders.
func (m *VendorProductDetailMutation) VendorParentIDs() (ids []int) {
	if id := m.vendor_parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVendorParent resets all changes to the "vendor_parent" edge.
func (m *VendorProductDetailMutation) ResetVendorParent() {
	m.vendor_parent = nil
	m.clearedvendor_parent = false
}

// SetProductParentID sets the "product_parent" edge to the Product entity by id.
func (m *VendorProductDetailMutation) SetProductParentID(id int) {
	m.product_parent = &id
}

// ClearProductParent clears the "product_parent" edge to the Product entity.
func (m *VendorProductDetailMutation) ClearProductParent() {
	m.clearedproduct_parent = true
}

// ProductParentCleared reports if the "product_parent" edge to the Product entity was cleared.
func (m *VendorProductDetailMutation) ProductParentCleared() bool {
	return m.ProductIDCleared() || m.clearedproduct_parent
}

// ProductParentID returns the "product_parent" edge ID in the mutation.
func (m *VendorProductDetailMutation) ProductParentID() (id int, exists bool) {
	if m.product_parent != nil {
		return *m.product_parent, true
	}
	return
}

// ProductParentIDs returns the "product_parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductParentID instead. It exists only for internal usage by the builders.
func (m *VendorProductDetailMutation) ProductParentIDs() (ids []int) {
	if id := m.product_parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProductParent resets all changes to the "product_parent" edge.
func (m *VendorProductDetailMutation) ResetProductParent() {
	m.product_parent = nil
	m.clearedproduct_parent = false
}

// Where appends a list predicates to the VendorProductDetailMutation builder.
func (m *VendorProductDetailMutation) Where(ps ...predicate.VendorProductDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VendorProductDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VendorProductDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VendorProductDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VendorProductDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VendorProductDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VendorProductDetail).
func (m *VendorProductDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VendorProductDetailMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.vendor_parent != nil {
		fields = append(fields, vendorproductdetail.FieldVendorID)
	}
	if m.product_parent != nil {
		fields = append(fields, vendorproductdetail.FieldProductID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VendorProductDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vendorproductdetail.FieldVendorID:
		return m.VendorID()
	case vendorproductdetail.FieldProductID:
		return m.ProductID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VendorProductDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vendorproductdetail.FieldVendorID:
		return m.OldVendorID(ctx)
	case vendorproductdetail.FieldProductID:
		return m.OldProductID(ctx)
	}
	return nil, fmt.Errorf("unknown VendorProductDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorProductDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vendorproductdetail.FieldVendorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorID(v)
		return nil
	case vendorproductdetail.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	}
	return fmt.Errorf("unknown VendorProductDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VendorProductDetailMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VendorProductDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorProductDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VendorProductDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VendorProductDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vendorproductdetail.FieldVendorID) {
		fields = append(fields, vendorproductdetail.FieldVendorID)
	}
	if m.FieldCleared(vendorproductdetail.FieldProductID) {
		fields = append(fields, vendorproductdetail.FieldProductID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VendorProductDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VendorProductDetailMutation) ClearField(name string) error {
	switch name {
	case vendorproductdetail.FieldVendorID:
		m.ClearVendorID()
		return nil
	case vendorproductdetail.FieldProductID:
		m.ClearProductID()
		return nil
	}
	return fmt.Errorf("unknown VendorProductDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VendorProductDetailMutation) ResetField(name string) error {
	switch name {
	case vendorproductdetail.FieldVendorID:
		m.ResetVendorID()
		return nil
	case vendorproductdetail.FieldProductID:
		m.ResetProductID()
		return nil
	}
	return fmt.Errorf("unknown VendorProductDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VendorProductDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.vendor_parent != nil {
		edges = append(edges, vendorproductdetail.EdgeVendorParent)
	}
	if m.product_parent != nil {
		edges = append(edges, vendorproductdetail.EdgeProductParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VendorProductDetailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vendorproductdetail.EdgeVendorParent:
		if id := m.vendor_parent; id != nil {
			return []ent.Value{*id}
		}
	case vendorproductdetail.EdgeProductParent:
		if id := m.product_parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VendorProductDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VendorProductDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VendorProductDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvendor_parent {
		edges = append(edges, vendorproductdetail.EdgeVendorParent)
	}
	if m.clearedproduct_parent {
		edges = append(edges, vendorproductdetail.EdgeProductParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VendorProductDetailMutation) EdgeCleared(name string) bool {
	switch name {
	case vendorproductdetail.EdgeVendorParent:
		return m.clearedvendor_parent
	case vendorproductdetail.EdgeProductParent:
		return m.clearedproduct_parent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VendorProductDetailMutation) ClearEdge(name string) error {
	switch name {
	case vendorproductdetail.EdgeVendorParent:
		m.ClearVendorParent()
		return nil
	case vendorproductdetail.EdgeProductParent:
		m.ClearProductParent()
		return nil
	}
	return fmt.Errorf("unknown VendorProductDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VendorProductDetailMutation) ResetEdge(name string) error {
	switch name {
	case vendorproductdetail.EdgeVendorParent:
		m.ResetVendorParent()
		return nil
	case vendorproductdetail.EdgeProductParent:
		m.ResetProductParent()
		return nil
	}
	return fmt.Errorf("unknown VendorProductDetail edge %s", name)
}
